<!-- The View for the intial search form page -->

<!-- The ViewModel for this view is the HomeSearchViewModel -->
@model FlightPrices.WebApp.ViewModels.Home.HomeSearchViewModel
@{
    ViewData["Title"] = "Home Page";
}

<!-- The View for the intial search form page -->
@using (Html.BeginForm(
    actionName: "Search",
    controllerName: "Home",
    method: FormMethod.Get,
    new {id = "search-form" }))
{
    <!-- This field will accept input for the origin airport name -->
    <div class="form-group">               
        <label for="origin">
            Where From?
        </label>

        <!--Binds to the OriginAirport view model property -->      
        <input type="text"                         
               class="form-control"
               id="origin"
               aria-describedby="origin-help"
               placeholder="Select Origin"
               asp-for="OriginAirport" />

        <!-- Display an error message for the OriginAirport field if validation fails --> 
        @Html.ValidationMessageFor(model => model.OriginAirport, "", new { @class = "text-danger" })
    </div>

    <!-- This field will accept input for the destination airport name -->
    <div class="form-group">               
        <label for="destination">
            Where To?
        </label>

        <!--Binds to the DestinationAirport view model property -->  
        <input type="text"
               class="form-control"
               id="destination"
               aria-describedby="destination-help"
               placeholder="Select Destination"
               asp-for="DestinationAirport" />

        <!-- Display an error message for the DestinationAirport field if validation fails --> 
        @Html.ValidationMessageFor(model => model.DestinationAirport, "", new { @class = "text-danger" })
    </div>

    <!-- This field will accept input for the take off date -->
    <div class="form-group">               
        <div>
            <label for="departure-date">
                When Do You Want To Leave?
            </label>
        </div>

        <!--Binds to the TakeOffDate ViewModel property -->  
        <!--The minimum value is the current date, to prevent invalid input-->
        <input id="departure-date"
               type="date"
               asp-for="TakeOffDate"
               min="@DateTime.Now.ToString("yyyy-MM-dd")" />
        <div></div>

        <!-- Display an error message for the TakeOffDate field if validation fails --> 
        @Html.ValidationMessageFor(model => model.TakeOffDate, "", new { @class = "text-danger" })
    </div>

    <!-- This field will accept input for the return date -->
    <div class="form-group">                
        <div>
            <label for="return-date">
                When Do You Want To Return?
            </label>
        </div>

        <!--Binds to the ReturnDate ViewModel property. Disabled by default. -->  
        <!--The minimum value is the current date, to prevent invalid input-->
        <input id="return-date"
               type="date"
               asp-for="ReturnDate"
               min="@DateTime.Now.ToString("yyyy-MM-dd")"
               disabled />
    </div>

    <!-- This field for whether the flights should be round trip -->
    <div class="form-check">             

        <!--Binds to the IsRoundTrip property in the ViewModel -->  
        <input type="checkbox"
               class="form-check-input"
               id="round-trip"
               asp-for="IsRoundTrip" />

        <!-- Display an error message for the IsRoundTrip field if validation fails --> 
        @Html.ValidationMessageFor(model => model.IsRoundTrip, "", new { @class = "text-danger" })

        <label class="form-check-label"
               for="round-trip">
            Round Trip
        </label>
    </div>

    <button type="submit"
            class="btn btn-primary"
            id="submitButton">
        Submit
    </button>
}

<!--This div will be displayed when the user submits the form and the UI is blocked-->
<div id="message" style="display:none;">
    <h3>Searching flights</h3>
</div>

@section Scripts
{
    <script>
        
        // This JQuery function disables the return-date field if the round-trip field is checked and 
        // vice versa
        $('#round-trip').click(function() 
        {
            if ($('#round-trip').prop("checked")) 
            {
                $("#return-date").prop('disabled', false);
            }
            else 
            {
                $("#return-date").prop('disabled', true);
            }
        });

    </script>

    <script>

        // This JQuery script implements autocomplete and suggestions for airport names for the origin and
        // destination airport name fields
        $(document).ready(function()
        {
            // Serialize the server-side Airports instances into JSON objects
            let airports = @Html.Raw(Json.Serialize(@Model.Airports));

            // Get the list of valid airport names
            let airportNames = airports.map(a => a.airportName);

            // Activate autocompletion using the airportNames list
            $("#origin, #destination").autocomplete(
            {
                source: airportNames
            });
        })

    </script>

    <script>

        // This JQuery function changes the minimum date of the return-date input to guarantee
        // that the user cannot select a return-date that is earlier than the departure data
        $("#departure-date").change(function()
        {
            // Get the new value of the departureDate
            let departureValue = $("#departure-date").val();
            let departureDate = Date.parse(departureValue);

            if (!document.getElementById("return-date").disabled)
            {
                // Get the current value of the returnDate
                let returnValue = $("#return-date").val();
                let returnDate = Date.parse(returnValue);

                // If the new departure date is later than the return date, reset the return date
                // to the new departure date value
                if (returnDate < departureDate)
                {
                    document.getElementById("return-date").value = departureValue;
                }
            }

            // Set the new minimum value of the return-date to be the new departure data.
            document.getElementById("return-date").setAttribute("min", departureValue);
        })
    </script>

    <script>

        // This JQuery function displays a loading message and blocks the UI when the
        // user hits search until the search results are ready
        $("#search-form").submit(function() 
        {
            // This function modifies the HTML element that the users sees when the UI is
            // blocked to simulate animation
            function startAnimation() 
            {
               let i = 0;
               intervalId = setInterval(function() 
               {
                  i = ++i % 5;
                  $("#message").html("<h3>" + "Searching flights "+ Array(i+1).join(".") + "</h3>");

               }, 800);
            }

            // This function blocks the UI with an HTML element
            $.blockUI({
                css: 
                {
                    border: 'none',
                    padding: '15px',
                    backgroundColor: '#FFFFFF',
                    opacity: 1
                },
                message: $('#message'),
                fadeIn: 0
            });

            // Run the animation on submission of the form
            startAnimation();    
        });
    </script>
}
